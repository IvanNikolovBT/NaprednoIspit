package Post;//package Post;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;


public class PostTester {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String postAuthor = sc.nextLine();
        String postContent = sc.nextLine();

        Post p = new Post(postAuthor, postContent);

        while (sc.hasNextLine()) {
            String line = sc.nextLine();
            String[] parts = line.split(";");
            String testCase = parts[0];

            if (testCase.equals("addComment")) {
                String author = parts[1];
                String id = parts[2];
                String content = parts[3];
                String replyToId = null;
                if (parts.length == 5) {
                    replyToId = parts[4];
                }
                p.addComment(author, id, content, replyToId);
            } else if (testCase.equals("likes")) { //likes;1;2;3;4;1;1;1;1;1 example
                for (int i = 1; i < parts.length; i++) {
                    p.likeComment(parts[i]);
                }
            } else {
                System.out.println(p);
            }

        }
    }
}
interface Commentable
{
     int getLikes();
}
class Comment implements Commentable
{

    Set<Comment> comments;
    String commentID;
    String content;
    int likes;
    String user;
    int level;
    public Comment(String user,String commentID,String content, int level)
    {
        this.user=user;
        this.commentID=commentID;
        this.content=content;
        comments=new TreeSet<>(Comparator.comparing(Comment::getLikes,Comparator.reverseOrder()));
        likes=0;
        this.level=level;
    }
    @Override
    public int getLikes() {
        return likes;

//        return comments.stream().mapToInt(Comment::getLikes).sum()+likes;
    }
    void addLike()
    {
        likes++;
    }

    public void addComment(Comment comment) {
        comments.add(comment);
    }

    @Override
    public String toString() {
        StringBuilder sb=new StringBuilder();
        sb.append(String.format("%sComment: %s\n",printIndent(),content));
        sb.append(String.format("%sWritten by: %s\n",printIndent(),user));
        sb.append(String.format("%sLikes: %d\n",printIndent(),getLikes()));
        for(Comment c:comments)
            sb.append(c);
        return sb.toString();
    }
    public String printIndent()
    {
        StringBuilder stringBuilder=new StringBuilder();
        for(int i=0;i<level;i++)
            stringBuilder.append("    ");

        return stringBuilder.toString();
    }

    public String  getContent() {
        return content;
    }
    public  boolean
}
class Post implements Commentable
{
    String username;
    String content;
    Set<Comment>forThisLevel;//site mozni komentari gi mame tuka
    Map<String,Comment>idComments;//p
    String root;
    public Post(String username, String content) {
        this.username = username;
        this.content = content;
        forThisLevel=new TreeSet<>(Comparator.comparing(Comment::getLikes,Comparator.reverseOrder()).thenComparing(Comment::getContent));
        idComments=new TreeMap<>();
        root="root";
    }

    void addComment (String username, String commentId, String content, String replyToId)
    {

        if(replyToId==null)
        {

            Comment comment=new Comment(username,commentId,content,2);
            forThisLevel.add(comment);
            idComments.put(commentId,comment);
        }else
        {
            Comment toAdd=idComments.get(replyToId);
            Comment comment=new Comment(username,commentId,content, toAdd.level+1);
            idComments.put(commentId,comment);
            toAdd.addComment(comment);
        }

    }
    public int getLikes()
    {
        return forThisLevel.stream().mapToInt(Comment::getLikes).sum();
    }

    public void likeComment(String commentID)
    {
        Comment comment=idComments.get(commentID);
        comment.addLike();
    }

    @Override
    public String toString() {
        StringBuilder sb=new StringBuilder();
        sb.append(String.format("Post: %s\n",content));
        sb.append(String.format("Written by: %s\n",username));
        sb.append("Comments: \n");
        for(Comment c:forThisLevel)
            sb.append(c);
        return sb.toString();
    }
}
